name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on any push
  push:

  workflow_call:
    secrets:
      username:
        description: "Username to log into Artifactory"
        required: true
      password:
        description: "Password to log into Artifactory"
        required: true

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

  REGISTRY_BASE: artifactory.coprs.esa-copernicus.eu
  ARTIFACTORY_PROJECT: werum-docker

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.0
        with:
          # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
          node-version: 14.x

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run production build
      - name: Run build
        run: npm run build

  # This workflow contains a single job called "build"
  test:
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.0
        with:
          # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
          node-version: 14.x

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run Unit tests
      - name: Run Unit Tests
        run: npm run test:ci

        # Run e2e tests
      - name: Run e2e Tests
        run: npm run e2e:ci

  scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.0
        with:
          # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
          node-version: 14.x

      - name: Install dependencies
        run: npm install

      - name: Extract version name
        shell: bash
        run: echo "##[set-output name=version;]$(echo $(jq -r ".version" package.json))"
        id: extract_version

      - name: Run Unit Tests to create test coverage report
        run: npm run test:ci

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.sources=./src
            -Dsonar.projectKey=user-web-client
            -Dsonar.branch.name=${{ steps.extract_branch.outputs.branch }}
            -Dsonar.projectVersion=${{ steps.extract_version.outputs.version }}
            -Dsonar.javascript.lcov.reportPaths=coverage/user-web-client/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}

      - name: GitGuardian scan
        uses: GitGuardian/gg-shield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # npm_audit:
  #   name: npm audit
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: install dependencies
  #       run: npm ci
  #     - uses: oke-py/npm-audit-action@v1.8.0
  #       with:
  #         audit_level: high
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         issue_assignees: oke-py
  #         issue_labels: vulnerability,test
  #         dedupe_issues: true

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Login to Artifactory
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_BASE }}/${{ env.ARTIFACTORY_PROJECT }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY_BASE }}/${{ env.ARTIFACTORY_PROJECT }}/${{ env.IMAGE_NAME }}

      # Build Docker image using Buildx
      # This Action automatically pull the code from the branch it's launched from
      # https://github.com/docker/build-push-action
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan image
        uses: anchore/scan-action@v2
        id: scan
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          acs-report-enable: true
          fail-build: true
          severity-cutoff: critical

      - name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Upload Anchore scan json report
        uses: actions/upload-artifact@master
        with:
          name: vulnerabilities
          path: ${{ steps.scan.outputs.vulnerabilities }}

      - name: Push image
        run: |
          docker push ${{ fromJSON(steps.meta.outputs.json).tags[0] }};

  generate_reports:
    needs: build-docker
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Download json report from build job
        uses: actions/download-artifact@v2
        with:
          name: vulnerabilities

      - name: Generate CSV and intermediate HTML report
        run: |
          echo "SEVERITY;ID;PACKAGE;VERSION;LINK" > vulnerabilities.csv
          cat vulnerabilities.json | jq -r '.matches[] | "\(.vulnerability.severity);\(.vulnerability.id);\(.artifact.name);\(.artifact.version);\(.vulnerability.links[0])"' >> vulnerabilities.csv
          echo -e '<table>\n<thead>\n<tr class="header">\n<th><p>SEVERITY</p></th>\n<th><p>ID</p></th>\n<th><p>PACKAGE</p></th>\n<th><p>VERSION</p></th>\n</tr>\n</thead>\n<tbody>' > vulnerabilities.html
          cat vulnerabilities.json | jq -r '.matches[] | "<tr>;<td><p>\(.vulnerability.severity)</p></td>;<td><p><a href=\"\(.vulnerability.links[0])\">\(.vulnerability.id)</a></p></td>;<td><p>\(.artifact.name)</p></td>;<td><p>\(.artifact.version)</p></td>;</tr>"' | tr -s ';' '\n' | sed 's!><p>Negligible! style="background-color:#FFFFFF;"><p>Negligible!g' | sed 's!><p>Low! style="background-color:#FFFC9E;"><p>Low!g' | sed 's!><p>Medium! style="background-color:#FE996B;"><p>Medium!g' | sed 's!><p>High! style="background-color:#FD6864;"><p>High!g' | sed 's!><p>Critical! style="background-color:#FE0000;"><p>Critical!g' >> vulnerabilities.html
          echo -e '</tbody>\n</table>' >> vulnerabilities.html

      - name: Convert HTLM to PDF
        uses: docker://ghcr.io/coprs/reference-system:dependencies_wkhtmltopdf
        with:
          args: vulnerabilities.html vulnerabilities.pdf

      - name: Upload Anchore scan reports
        uses: actions/upload-artifact@master
        with:
          name: vulnerabilities
          path: |
            vulnerabilities.csv
            vulnerabilities.pdf
